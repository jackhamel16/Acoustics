using LinearAlgebra

include("mesh.jl")

# The gauss7 rule comes from:
#    https://www.math.unipd.it/~alvise/SETS_CUBATURE_TRIANGLE/dunavant/set_dunavant_barycentric.m
#    Note: ordering of the triangle nodes counter-clockwise
const gauss7points = [3.33333333333333314829616256247391e-01 3.33333333333333314829616256247391e-01 3.33333333333333314829616256247391e-01
                      4.70142064105100010440452251714305e-01 4.70142064105100010440452251714305e-01 5.97158717897999791190954965713900e-01
                      4.70142064105100010440452251714305e-01 5.97158717897999791190954965713900e-02 4.70142064105100010440452251714305e-01
                      5.97158717897999791190954965713900e-02 4.70142064105100010440452251714305e-01 4.70142064105100010440452251714305e-01
                      1.01286507323455995943639607048681e-01 1.01286507323455995943639607048681e-01 7.97426985353087980357145170273725e-01
                      1.01286507323455995943639607048681e-01 7.97426985353087980357145170273725e-01 1.01286507323455995943639607048681e-01
                      7.97426985353087980357145170273725e-01 1.01286507323455995943639607048681e-01 1.01286507323455995943639607048681e-01]
const gauss7weights = [2.25000000000000255351295663786004e-01
                       1.32394152788506136442236993389088e-01
                       1.32394152788506136442236993389088e-01
                       1.32394152788506136442236993389088e-01
                       1.25939180544827139529573400977824e-01
                       1.25939180544827139529573400977824e-01
                       1.25939180544827139529573400977824e-01]
const gauss13points = [3.33333333333333314829616256247391e-01 3.33333333333333314829616256247391e-01 3.33333333333333425851918718763045e-01
                       2.60345966079039703444664155540522e-01 2.60345966079039925489269080571830e-01 4.79308067841920371066066763887648e-01
                       2.60345966079039981000420311829657e-01 4.79308067841920260043764301371993e-01 2.60345966079039814466966618056176e-01
                       4.79308067841920426577217995145475e-01 2.60345966079039647933512924282695e-01 2.60345966079039981000420311829657e-01
                       6.51301029022158389780727816287254e-02 6.51301029022158112224971659998118e-02 8.69739794195568349799430052371463e-01
                       6.51301029022158112224971659998118e-02 8.69739794195568349799430052371463e-01 6.51301029022158806114362050720956e-02
                       8.69739794195568349799430052371463e-01 6.51301029022158389780727816287254e-02 6.51301029022158112224971659998118e-02
                       4.86903154253163772402501763281180e-02 3.12865496004873788749023333366495e-01 6.38444188569809778499575259047560e-01
                       4.86903154253164327514014075859450e-02 6.38444188569809667477272796531906e-01 3.12865496004873899771325795882149e-01
                       3.12865496004873899771325795882149e-01 4.86903154253164396902953114931734e-02 6.38444188569809667477272796531906e-01
                       3.12865496004873844260174564624322e-01 6.38444188569809778499575259047560e-01 4.86903154253164327514014075859450e-02
                       6.38444188569809778499575259047560e-01 4.86903154253163703013562724208896e-02 3.12865496004873844260174564624322e-01
                       6.38444188569809667477272796531906e-01 3.12865496004873899771325795882149e-01 4.86903154253164327514014075859450e-02]
const gauss13weights = [-1.49570044467681767530464753690467e-01
                         1.75615257433207827553189872560324e-01
                         1.75615257433207883064341103818151e-01
                         1.75615257433207772042038641302497e-01
                         5.33472356088385002426122127872077e-02
                         5.33472356088384933037183088799793e-02
                         5.33472356088384933037183088799793e-02
                         7.71137608902571214386512110650074e-02
                         7.71137608902572185831658657662047e-02
                         7.71137608902572047053780579517479e-02
                         7.71137608902571353164390188794641e-02
                         7.71137608902570936830755954360939e-02
                         7.71137608902572324609536735806614e-02]

# const gauss13points = [3.33333333333333314829616256247391e-01 3.33333333333333314829616256247391e-01 3.33333333333333314829616256247391e-01;
#                        2.60345966079039981000420311829657e-01 2.60345966079039981000420311829657e-01 4.79308067841920037999159376340685e-01;
#                        2.60345966079039981000420311829657e-01 4.79308067841920037999159376340685e-01 2.60345966079039981000420311829657e-01;
#                        4.79308067841920037999159376340685e-01 2.60345966079039981000420311829657e-01 2.60345966079039981000420311829657e-01;
#                        6.51301029022160055115264754022064e-02 6.51301029022160055115264754022064e-02 8.69739794195568016732522664824501e-01;
#                        6.51301029022160055115264754022064e-02 8.69739794195568016732522664824501e-01 6.51301029022160055115264754022064e-02;
#                        8.69739794195568016732522664824501e-01 6.51301029022160055115264754022064e-02 6.51301029022160055115264754022064e-02;
#                        4.86903154253160025399793653377856e-02 3.12865496004874010793628258397803e-01 6.38444188569810000544180184078868e-01;
#                        4.86903154253160025399793653377856e-02 6.38444188569810000544180184078868e-01 3.12865496004874010793628258397803e-01;
#                        3.12865496004874010793628258397803e-01 4.86903154253160025399793653377856e-02 6.38444188569810000544180184078868e-01;
#                        3.12865496004874010793628258397803e-01 6.38444188569810000544180184078868e-01 4.86903154253160025399793653377856e-02;
#                        6.38444188569810000544180184078868e-01 4.86903154253160025399793653377856e-02 3.12865496004874010793628258397803e-01;
#                        6.38444188569810000544180184078868e-01 3.12865496004874010793628258397803e-01 4.86903154253160025399793653377856e-02]
# const gauss13weights = [-1.49570044467682294886401450639823e-01
#                         1.75615257433208354909126569509681e-01
#                         1.75615257433208354909126569509681e-01
#                         1.75615257433208354909126569509681e-01
#                         5.33472356088381047256596900751902e-02
#                         5.33472356088381047256596900751902e-02
#                         5.33472356088381047256596900751902e-02
#                         7.71137608902571491942268266939209e-02
#                         7.71137608902571491942268266939209e-02
#                         7.71137608902571491942268266939209e-02
#                         7.71137608902571491942268266939209e-02
#                         7.71137608902571491942268266939209e-02
#                         7.71137608902571491942268266939209e-02]

function gaussQuadrature(scale_factor::Float64, func::Function, points::Array{Float64, 2}, weights::Array{Float64, 1})
    num_points = length(weights)
    quadrature_sum = 0
    for sum_idx in 1:num_points
        x, y, z = points[sum_idx,:]
        quadrature_sum += weights[sum_idx] * func(x, y, z)
    end
    scale_factor * quadrature_sum
end

function integrateTriangle(nodes::Array{Float64, 2}, func::Function, points::Array{Float64, 2}, weights::Array{Float64, 1})
    num_points = size(points)[1]
    triangle_area = norm(cross(nodes[2,:]-nodes[1,:], nodes[3,:]-nodes[2,:]))/2
    quadrature_points = Array{Float64, 2}(undef, num_points, 3)
    for point_idx in 1:num_points
        quadrature_points[point_idx,:] = barycentric2Cartesian(nodes, points[point_idx,:])
    end
    gaussQuadrature(triangle_area, func, quadrature_points, weights)
end
